// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using s7_01.Api.DataAccess;

#nullable disable

namespace s7_01.Migrations
{
    [DbContext(typeof(VeterinariaContext))]
    partial class VeterinariaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Autorizacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EsActiva")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaAutorizacion")
                        .HasColumnType("TEXT");

                    b.Property<int>("MascotaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VeterinariaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MascotaId");

                    b.HasIndex("VeterinariaId");

                    b.ToTable("Autorizaciones");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPersona")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdPersona")
                        .IsUnique();

                    b.ToTable("Direcciones");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.HistoriaClinica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comentarios")
                        .HasColumnType("TEXT");

                    b.Property<int>("MascotaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MascotaId");

                    b.ToTable("Historias");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Mascota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Especie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaNacimento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Peso")
                        .HasColumnType("DECIMAL(5,2)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Mascotas");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.MascotaPropietario", b =>
                {
                    b.Property<int>("MascotaId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(0);

                    b.Property<int>("PropietarioId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<bool>("EsPrincipal")
                        .HasColumnType("INTEGER");

                    b.HasKey("MascotaId", "PropietarioId");

                    b.HasIndex("PropietarioId");

                    b.ToTable("MascotaPropietarios");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Persona");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Persona");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Costo")
                        .HasColumnType("DECIMAL(11,2)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VeterinariaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VeterinariaId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Recordatorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DestinatarioId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiasPreviosNotificacion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EsEmailEnviado")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EsLeido")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EsPushNotificationEnviada")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EsSMSEnviado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaNotificacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DestinatarioId");

                    b.ToTable("Recordatorios");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Costo")
                        .HasColumnType("DECIMAL(11,2)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VeterinariaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VeterinariaId");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Tratamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DosisMedicamento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HistoriaClinicaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NombreMedico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoTratamiento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VeterinariaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HistoriaClinicaId");

                    b.HasIndex("VeterinariaId");

                    b.ToTable("Tratamientos");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Vacuna", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EsDosisUnica")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("TEXT");

                    b.Property<int>("HistoriaClinicaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoteSerial")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ProximaAplicacion")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HistoriaClinicaId");

                    b.ToTable("Vacunas");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Propietario", b =>
                {
                    b.HasBaseType("s7_01.Api.DataAccess.Models.Persona");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Propietario");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Veterinaria", b =>
                {
                    b.HasBaseType("s7_01.Api.DataAccess.Models.Persona");

                    b.Property<string>("CUIT")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Facebook")
                        .HasColumnType("TEXT");

                    b.Property<string>("Instagram")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoURI")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Twitter")
                        .HasColumnType("TEXT");

                    b.Property<string>("Whatsapp")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Veterinaria");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Autorizacion", b =>
                {
                    b.HasOne("s7_01.Api.DataAccess.Models.Mascota", "Mascota")
                        .WithMany()
                        .HasForeignKey("MascotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("s7_01.Api.DataAccess.Models.Veterinaria", "Veterinaria")
                        .WithMany()
                        .HasForeignKey("VeterinariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mascota");

                    b.Navigation("Veterinaria");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Direccion", b =>
                {
                    b.HasOne("s7_01.Api.DataAccess.Models.Persona", "Persona")
                        .WithOne("Direccion")
                        .HasForeignKey("s7_01.Api.DataAccess.Models.Direccion", "IdPersona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.HistoriaClinica", b =>
                {
                    b.HasOne("s7_01.Api.DataAccess.Models.Mascota", "Mascota")
                        .WithMany()
                        .HasForeignKey("MascotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mascota");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.MascotaPropietario", b =>
                {
                    b.HasOne("s7_01.Api.DataAccess.Models.Mascota", "Mascota")
                        .WithMany()
                        .HasForeignKey("MascotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("s7_01.Api.DataAccess.Models.Propietario", "Propietario")
                        .WithMany()
                        .HasForeignKey("PropietarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mascota");

                    b.Navigation("Propietario");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Producto", b =>
                {
                    b.HasOne("s7_01.Api.DataAccess.Models.Veterinaria", "Veterinaria")
                        .WithMany("Productos")
                        .HasForeignKey("VeterinariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Veterinaria");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Recordatorio", b =>
                {
                    b.HasOne("s7_01.Api.DataAccess.Models.Propietario", "Destinatario")
                        .WithMany()
                        .HasForeignKey("DestinatarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destinatario");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Servicio", b =>
                {
                    b.HasOne("s7_01.Api.DataAccess.Models.Veterinaria", "Veterinaria")
                        .WithMany("Servicios")
                        .HasForeignKey("VeterinariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Veterinaria");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Tratamiento", b =>
                {
                    b.HasOne("s7_01.Api.DataAccess.Models.HistoriaClinica", "HistoriaClinica")
                        .WithMany("Tratamientos")
                        .HasForeignKey("HistoriaClinicaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("s7_01.Api.DataAccess.Models.Veterinaria", "Veterinaria")
                        .WithMany()
                        .HasForeignKey("VeterinariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistoriaClinica");

                    b.Navigation("Veterinaria");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Vacuna", b =>
                {
                    b.HasOne("s7_01.Api.DataAccess.Models.HistoriaClinica", "HistoriaClinica")
                        .WithMany("Vacunas")
                        .HasForeignKey("HistoriaClinicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistoriaClinica");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.HistoriaClinica", b =>
                {
                    b.Navigation("Tratamientos");

                    b.Navigation("Vacunas");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Persona", b =>
                {
                    b.Navigation("Direccion");
                });

            modelBuilder.Entity("s7_01.Api.DataAccess.Models.Veterinaria", b =>
                {
                    b.Navigation("Productos");

                    b.Navigation("Servicios");
                });
#pragma warning restore 612, 618
        }
    }
}
